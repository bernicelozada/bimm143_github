---
title: "Class 5: Data Visualization with ggplot"
author: "Bernice Lozada (PID: A16297973)"
format: pdf
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics packages on the planet.

There are many plotting systems in R. These include so-called *"base"* plotting/graphics.

```{r}
plot(cars)
```

Base plot is generally rather short code and somewhat dull plots - but it is always there for you and is fast for big datasets. 

```{r}
# install.packages("ggplot2")
library(ggplot2)

ggplot(cars)
```


The command to install the package first using `install.packages()` in the R console to make it permanent.

To use a package, it needs to be loaded up with a `library()` call.

Every ggplot has at least three things: 

- **data** (the data.frame with the plotting data)
- **aes** (aesthetic mapping of data to plot)
- **geom** (how you want plot to look - points, lines, etc.)

```{r}
bp <- ggplot(cars) +
  aes(x=speed, y= dist) +
  geom_point()
bp
```

```{r}
bp_new <- bp + geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Stopping Distance of Old Cars",
       x = "Speed (MPH)",
       y = "Distance (ft)",
       caption = "From the cars dataset") +
  theme_bw()
bp_new
```

## A more complicated scatter plot

Here we make a plot of gene expression data:
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)

nrow(genes)
colnames(genes)
ncol(genes)
table(genes$State)

#fraction
round(sum(genes$State == "up")/nrow(genes)*100,2)
```

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.percent <- n.up/n.gene * 100
round(up.percent, 2)

```

```{r}
p <- ggplot(genes) + 
  aes(x = Condition1, y = Condition2, col = State) +
  geom_point()
```

```{r}
# Changing Colors
p + scale_colour_manual(values = c("yellow","orange","pink")) +
  labs(x = "Control (no drug)", y = "Drug Treatment", title = "Gene Expression Changes Upon Drug Treatment") + 
  theme_bw()
```

## Exploring the gapmider dataset

Load up the gapminder dataset for practice with different aes mappings.

> Find number of countries in databasse
```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)

table(gapminder$continent)

# Can use unique() function
length(unique(gapminder$continent))

# number of countries
length(unique(gapminder$country))
```
```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

head(gapminder_2007)
```

```{r}
ggplot(gapminder) + aes(x=gdpPercap, y = lifeExp, col=continent, size = pop) + geom_point(alpha=0.2)

## for 2007
ggplot(gapminder_2007) + aes(x=gdpPercap, y = lifeExp, col=continent, size = pop) + geom_point(alpha=0.6)

```

With dyplr

```{r}
#install.packages("dplyr")
library(dplyr)
gapminder_2007 <- filter(gapminder, year == 2007)
head(gapminder_2007)
```

Plot of 2007 with population and continent data
```
```{r}
ggplot(gapminder_2007) + aes(x=gdpPercap, y = lifeExp, col=continent, size = pop) + geom_point(alpha=0.6)
```

Facet_wrap data to compare 1957 and 2007
```{r}
gapminder_1957 <- filter(gapminder, year == 1957 | year == 2007)
ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```



