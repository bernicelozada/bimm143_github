---
title: "Lab 13"
author: "Bernice Lozada (A16297973)"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

# Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")

head(counts)
head(metadata)
```

> Q1. How many genes are in this dataset?

There are `r nrow(counts)` genes in this data set.

> Q2. How many ‘control’ cell lines do we have?

There are `r sum(metadata$dex == "control")` control cell lines.

## Extract and summarize the control samples

```{r}
control <- metadata[metadata$dex == "control",]
control.counts <- counts[,control$id]
control.mean <- rowMeans(control.counts)
head(control.mean)
```

## Extract and summarize the treated samples

```{r}
treated <- metadata[metadata$dex == "treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

Store these results together in a dataframe called mean counts.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Lets make a plot to explore the results a little.

```{r}
plot(meancounts[,1], meancounts[,2])
```

Make log-log plot to draw out this skewed data and see what is going on.

```{r}
plot(meancounts[,1], meancounts[,2], log="xy", xlab = "log of control counts",
     ylab = "log of treated counts")
```

Log2 transfirmation has a nice property, where no change will make the log2 value zero, doubling will lead log2 to be 1 and halving will lead it to be -1.

Add log2 fold change column to our results so far.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

# To get rid of NaN:

# says where the count is 0
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
# removes genes with 0 counts
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> How many genes are remaining?

There are `r nrow(mycounts)` genes remaining.

# Use fold change to see up and down regulated genes.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

# DESeq2 analysis

```{r}
#load up DESeq2
library(DESeq2)

dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex) # design - which col to look at
dds
```

```{r}
dds <- DESeq(dds)
res <- results(dds)

res
```

We can get some basic summary tallies using the `summary()` function.

```{r}
summary(res, alpha = 0.05)
```

# Volcano Plot

Let's make a summary plot of our results.

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Let's add colors:

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
```

Finish for today by saving our results.

```{r}
# write.csv(res, file = "DESeq2_results.csv")
```

## Add Annotation Data

We want to add on gene symbols (i.e. gene names) and other common identifiers from major databases for all our genes of interest.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
columns(org.Hs.eg.db)
```

My IDs are in the `rownames(res)` and they are from ENSEMBL

```{r}
res$symbol <- mapIds(org.Hs.eg.db, keys = rownames(res), 
       keytype = "ENSEMBL", # format of gene names
       column = "SYMBOL", # the new format we want to add
       multiVals = "first")
```

We also want "GENENAME" and "ENTREZID"

```{r}
res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype= "ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")
```

Let's save these results to a new CSV file.

```{r}
# write.csv(res, file = "DESeq2results_updatednames.csv")
```

Next, we will use the "gage" package to do some pathway analysis.

```{r}
#| message: false

library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

To runn gage we need to provide it with a vector of FC values (not our full big results table.

```{r}
foldchanges <- res$log2FoldChange

# Add ENTREZ ids as names to my foldchanges vector
names(foldchanges) <- res$entrez
head(foldchanges)

keggres <- gage(foldchanges, gsets = kegg.sets.hs)

```

Let's have a look at the hsa05310 Asthma pathway with our genes highlighted.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")

![](hsa05310.pathway.png)
```
